

var CrosslinkWidget = function( structureComp, csvData ){

    var container = new UI.Panel();

    var linkList = [];

    csvData.data.forEach( function( row ){

        linkList.push( {
            fromResidue: parseInt( row[ 0 ] ),
            toResidue: parseInt( row[ 2 ] )
        } );

    } );

    linkList = transformLinkList( linkList, "A" );

    var crosslinkData = new CrosslinkData( linkList );

    var xlRepr = new CrosslinkRepresentation(
        stage, structureComp, crosslinkData, {
            // highlightedColor: "lightgreen",
            // sstrucColor: "wheat",
            // displayedDistanceColor: "tomato"
        }
    );

    setTimeout( function(){

        var newLinkList = [];

        for( var i = 0, il = linkList.length; i < il; ++i ){
            if( i < 10 ){
                newLinkList.push( linkList[ i ] );
            }
        }

        crosslinkData.setLinkList( newLinkList );

    }, 2000 );

    setTimeout( function(){

        crosslinkData.setLinkList( linkList );

    }, 5000 );

    //

    function handlePicking( pickingData ){

        if( pickingData.residue ){

            xlRepr.setHighlightedResidues( [ pickingData.residue ] );
            xlRepr.setHighlightedLinks(
                xlRepr.crosslinkData.getLinks( pickingData.residue )
            );

        }else if( pickingData.link ){

            xlRepr.setHighlightedResidues( [
                pickingData.link.residueA, pickingData.link.residueB
            ] );
            xlRepr.setHighlightedLinks( [ pickingData.link ] );

        }else{

            xlRepr.setHighlightedResidues( false );
            xlRepr.setHighlightedLinks( false );

        }

    }

    xlRepr.signals.onPicking.add( handlePicking );

    //

    var colorOptions = {};
    for( var name in xlRepr.colorOptions ){
        colorOptions[ name ] = name;
    }

    var colorSelect = new UI.Select()
        .setOptions( colorOptions )
        .setValue( "linkCount" )
        .onChange( function(){
            var color = xlRepr.colorOptions[ colorSelect.getValue() ];
            if( color ){
                stage.getRepresentationsByName( "allRes" )
                    .setColor( color );
            }
        } );

    var displayedColor = new UI.ColorPopupMenu( "displayedColor" )
        .setValue( xlRepr.displayedResiduesColor )
        .onChange( function(){
            xlRepr.setParameters( {
                displayedColor: displayedColor.getValue()
            } );
        } );

    var labelVisible = new UI.Checkbox()
        .setValue( xlRepr.displayedDistanceVisible )
        .onChange( function(){
            xlRepr.setParameters( {
                displayedDistanceVisible: labelVisible.getValue()
            } );
        } );

    container.add(
        new UI.Text( "color" ).setMarginRight( "10px" ),
        colorSelect,
        new UI.Break(),
        new UI.Text( "displayed color" ).setMarginRight( "10px" ),
        displayedColor,
        new UI.Break(),
        new UI.Text( "label visible" ).setMarginRight( "10px" ),
        labelVisible
    );

    return container;

};


var CrosslinkLoader = function(){

    var container = new UI.Panel();

    var pdbFile = new UI.File().setWidth( "200px" );
    var csvFile = new UI.File().setWidth( "200px" );
    var infoText = new UI.Text();
    var loadBtn = new UI.Button( "Load" ).onClick( loadFiles );
    var exampleBtn = new UI.Button( "Example" ).onClick( loadExample );

    //

    function load( pdb, csv ){

        infoText.setValue( "loading..." );

        var initComp = function( comp ){
            comp.centerView();
            return comp;
        }

        var promiseList = [
            stage.loadFile( pdb, { ext: "pdb" } ).then( initComp ),
            NGL.autoLoad( csv, { ext: "csv" } )
        ];

        Promise.all( promiseList ).then( function( compList ){
            infoText.setValue( "" );
            crosslinkWidget = new CrosslinkWidget(
                compList[ 0 ], compList[ 1 ]
            );
            panel.add( crosslinkWidget );
        } );

    }

    function loadFiles(){

        var pdb = pdbFile.getFiles()[ 0 ];
        var csv = csvFile.getFiles()[ 0 ];

        if( !pdb || !csv ){
            infoText.setValue( "please supply PDB and CSV files" );
            return;
        }

        load( pdb, csv );

    }

    function loadExample(){

        load(
            "data://1AO6.pdb",
            "data://HSA_BS3_90links.csv"
        );

    }

    //

    var description = new UI.Panel().add(
        new UI.Html( "To map crosslink data onto a structure, open first a structure and then the corresponding crosslink data using the buttons below. Residues involved in crosslinks are marked with white spheres, which can be picked to highlight crosslinks with pink spheres." )
    );

    container.add(
        description,
        new UI.Break(),
        new UI.Text( "PDB:" ).setWidth( "45px" ),
        pdbFile,
        new UI.Break(),
        new UI.Text( "CSV:" ).setWidth( "45px" ),
        csvFile,
        new UI.Break(),
        new UI.Break(),
        loadBtn.setMarginRight( "10px" ),
        exampleBtn.setMarginRight( "10px" ),
        infoText
    );

    return container;

};

//

function crosslinkLoader(){

    var crosslinkLoader = new CrosslinkLoader();
    panel.add( crosslinkLoader );

}

