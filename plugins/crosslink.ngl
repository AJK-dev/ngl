
// Constructor

var CrosslinkRepresentation = function( stage, structureComp, xlList ){

    this.stage = stage;
    this.structureComp = structureComp;
    this.xlList = xlList;

    this.colorOptions = {};
    this._initColorSchemes();

    this._prepareStructure();
    this._prepareCrosslinkData();

    //

    var xlRes = this.xlRes;
    var xlBond = this.xlBond;
    var resToSele = CrosslinkRepresentation.resToSele;
    var getBondName = CrosslinkRepresentation.getBondName;

    this.stage.signals.onPicking.add( handlePicking );

    function handlePicking( d ){

        var focusedComp = stage.getRepresentationsByName( "focusedRes" );
        var linkedComp = stage.getRepresentationsByName( "linkedRes" );
        var focusedBondComp = stage.getRepresentationsByName( "focusedBond" );

        if( !focusedComp || !linkedComp || !focusedBondComp ) return;

        if( d.atom !== undefined && d.bond === undefined ){

            var linkedRes = xlRes[ d.atom.resno ];

            if( linkedRes ){

                focusedComp.setSelection( resToSele( d.atom.resno ) );
                linkedComp.setSelection( resToSele( linkedRes ) );

                // textElm.setValue( "[" + d.atom.resno + "] " + linkedRes.join( ", " ) );

            }else{

                focusedComp.setSelection( "none" );
                linkedComp.setSelection( "none" );

                textElm.setValue( "none" );

            }

            focusedBondComp.setSelection( "none" );

        }else if( d.bond !== undefined ){

            var bondedRes = xlBond[ getBondName( d.bond ) ];

            if( bondedRes ){

                focusedBondComp.setSelection( resToSele( bondedRes ) );

                // textElm.setValue( bondedRes.join( ", " ) );

            }else{

                focusedBondComp.setSelection( "none" );

                // textElm.setValue( "none" );

            }

            focusedComp.setSelection( "none" );
            linkedComp.setSelection( "none" );

        }else{

            focusedComp.setSelection( "none" );
            linkedComp.setSelection( "none" );
            focusedBondComp.setSelection( "none" );

            // textElm.setValue( "none" );

        }

    }

};

// Static functions

CrosslinkRepresentation.resToSele = function( resnoList, asSelection ){

    if( !Array.isArray( resnoList ) ) resnoList = [ resnoList ];
    var sele = "( " + resnoList.join( " OR " ) + " ) AND .CA";
    return asSelection ? new NGL.Selection( sele ) : sele;

};

CrosslinkRepresentation.getBondName = function( bond ){

    var resno1, resno2;

    if( arguments.length > 1 ){
        resno1 = arguments[ 0 ];
        resno2 = arguments[ 1 ];
    }else{
        resno1 = bond.atom1.resno;
        resno2 = bond.atom2.resno;
    }

    if( resno1 > resno2 ){
        var tmp = resno1
        resno1 = resno2;
        resno2 = tmp;
    }

    return resno1 + "|" + resno2;

};

// Methods

CrosslinkRepresentation.prototype = {

    constructor: CrosslinkRepresentation,

    _prepareStructure: function(){

        var comp = this.structureComp;

        comp.addRepresentation( "cartoon", {
            color: "residueindex"
        } );

        comp.addRepresentation( "spacefill", {
            sele: "none",
            color: this.linkCountScheme,
            scale: 0.6,
            name: "allRes"
        } );

        comp.addRepresentation( "spacefill", {
            sele: "none",
            color: "fuchsia",
            scale: 1.2,
            opacity: 0.7,
            name: "focusedRes"
        } );

        comp.addRepresentation( "spacefill", {
            sele: "none",
            color: "fuchsia",
            scale: 0.9,
            name: "linkedRes"
        } );

        this.stage.centerView( true );
        comp.centerView( true );

    },

    _prepareCrosslinkData: function(){

        var xlList = this.xlList;
        var structure = this.structureComp.structure;

        var xlRes = {};
        var xlBond = {};
        var xlPair = [];

        var resToSele = CrosslinkRepresentation.resToSele;
        var getBondName = CrosslinkRepresentation.getBondName;

        xlList.forEach( function( rl ){

            var resno1 = rl.fromResidue;
            var resno2 = rl.toResidue;

            if( xlRes[ resno1 ] === undefined ){
                xlRes[ resno1 ] = [];
            }
            xlRes[ resno1 ].push( resno2 );

            if( xlRes[ resno2 ] === undefined ){
                xlRes[ resno2 ] = [];
            }
            xlRes[ resno2 ].push( resno1 );

            xlBond[ getBondName( resno1, resno2 ) ] = [ resno2, resno1 ];

            var a1 = structure.getAtoms( resToSele( resno1, true ), true );
            var a2 = structure.getAtoms( resToSele( resno2, true ), true );

            if( a1 && a2 ){
                xlPair.push( [ resToSele( resno1 ), resToSele( resno2 ) ] );
            }

        } );

        var xlResList = Object.keys( xlRes );

        //

        this.stage.getRepresentationsByName( "allRes" )
            .setSelection( resToSele( xlResList ) );

        this.structureComp.addRepresentation( "distance", {
            atomPair: xlPair,
            color: new THREE.Color( "lightgrey" ).getHex(),
            labelSize: 0.001,
            name: "bond"
        } );

        this.structureComp.addRepresentation( "distance", {
            atomPair: xlPair,
            sele: "none",
            color: new THREE.Color( "fuchsia" ).getHex(),
            labelSize: 2.0,
            scale: 2.5,
            opacity: 0.6,
            name: "focusedBond"
        } );

        //

        this.xlRes = xlRes;
        this.xlBond = xlBond;
        this.xlPair = xlPair;
        this.xlResList = xlResList;

    },

    _initColorSchemes: function(){

        var self = this;

        var linkCountScale = chroma
            .scale( 'YlGn' )
            .mode('lch')
            .domain( [ 0, 8 ] );

        this.linkCountScheme = NGL.ColorMakerRegistry.addScheme( function( params ){

            this.atomColor = function( atom ){

                var count = self.xlRes[ atom.resno ].length;

                var _c = linkCountScale( count )._rgb;
                var c = _c[0] << 16 | _c[1] << 8 | _c[2];

                return c;

            }

        }, "linkCount" );

        this.colorOptions[ "linkCount" ] = this.linkCountScheme;
        this.colorOptions[ "white" ] = new THREE.Color( "white" ).getHex();
        this.colorOptions[ "lightgrey" ] = new THREE.Color( "lightgrey" ).getHex();

    },

};



// uiSelect( Object.keys( colorOptions ), function( select ){

//     var color = colorOptions[ select.getValue() ];

//     if( color ){

//         stage.getRepresentationsByName( "allRes" )
//             .setColor( color );

//     }

// } );


//


var CrosslinkWidget = function( structureComp, csvData ){

    var container = new UI.Panel();

    var xlList = [];

    csvData.data.forEach( function( row ){

        xlList.push( {
            fromResidue: parseInt( row[ 0 ] ),
            toResidue: parseInt( row[ 2 ] )
        } );

    } );

    var crosslinkRepresentation = new CrosslinkRepresentation(
        stage, structureComp, xlList
    );

    return container;

};


var CrosslinkLoader = function(){

    var container = new UI.Panel();

    var pdbFile = new UI.File().setWidth( "200px" );
    var csvFile = new UI.File().setWidth( "200px" );
    var infoText = new UI.Text();
    var loadBtn = new UI.Button( "Load" ).onClick( loadFiles );
    // var exampleBtn = new UI.Button( "Example" ).onClick( loadExample );

    //

    function load( pdb, csv ){

        infoText.setValue( "loading..." );

        var initComp = function( comp ){
            comp.requestGuiVisibility( false );
            comp.centerView();
            return comp;
        }

        var promiseList = [
            stage.loadFile( pdb, { ext: "pdb" } ).then( initComp ),
            NGL.autoLoad( csv, { ext: "csv" } )
        ];

        Promise.all( promiseList ).then( function( compList ){
            infoText.setValue( "" );
            crosslinkWidget = new CrosslinkWidget(
                compList[ 0 ], compList[ 1 ]
            );
            panel.add( crosslinkWidget );
        } );

    }

    function loadFiles(){

        var pdb = pdbFile.getFiles()[ 0 ];
        var csv = csvFile.getFiles()[ 0 ];

        if( !pdb || !csv ){
            infoText.setValue( "please supply PDB and CSV files" );
            return;
        }

        load( pdb, csv );

    }

    // function loadExample(){

    //     load(
    //         "data://1crn_apbs.pqr",
    //         "data://1crn_apbs_pot.dx.gz"
    //     );

    // }

    //

    var description = new UI.Panel().add(
        new UI.Html( "To map crosslink data onto a structure, open first a structure and then the corresponding crosslink data using the buttons below. Residues involved in crosslinks are marked with white spheres, which can be picked to highlight crosslinks with pink spheres." )
    );

    container.add(
        description,
        new UI.Break(),
        new UI.Text( "PDB:" ).setWidth( "45px" ),
        pdbFile,
        new UI.Break(),
        new UI.Text( "CSV:" ).setWidth( "45px" ),
        csvFile,
        new UI.Break(),
        new UI.Break(),
        loadBtn.setMarginRight( "10px" ),
        // exampleBtn.setMarginRight( "10px" ),
        infoText
    );

    return container;

};

//

function crosslinkLoader(){

    var crosslinkLoader = new CrosslinkLoader();
    panel.add( crosslinkLoader );

}

