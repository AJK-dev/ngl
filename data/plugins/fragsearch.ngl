

var FragsearchResultsPreset = function( data, params ){

    var p = Object.assign( {}, params );

    var pdbComp = data[ "pdb" ];
    var linkerComp = data[ "linker" ];
    var json = data[ "json" ];

    // pdb

    var cartoonRepr = pdbComp.addRepresentation( "cartoon", {

    } );

    var licoriceRepr = pdbComp.addRepresentation( "licorice", {

    } );

    // linker

    var backboneRepr = linkerComp.addRepresentation( "backbone", {
        radius: 0.25,
        colorScheme: "modelindex",
        // opacity: 0.3
    } );

    linkerComp.centerView();

    // json

    // console.log( json );

    //

    this.backboneRepr = backboneRepr;

    stage.centerView();

};


var FragsearchResultsWidget = function( pdbComp, linkerComp, linkerJson ){

    var data = {};

    var container = new UI.Panel();

    var data = {
        pdb: pdbComp,
        linker: linkerComp,
        json: linkerJson
    }

    var params = {
    };

    fragsearchResultsPreset = new FragsearchResultsPreset( data, params );

    var showAllBtn = new UI.Button( "show all" )
        .onClick( function(){
            fragsearchResultsPreset.backboneRepr.setSelection( "*" );
            virtualTable.selectRow();
        } );

    // PDB info

    var tether;

    var pdbTitle = new UI.Text();

    var pdbInfo = new UI.OverlayPanel()
        .setDisplay( "none" )
        .attach( this.dom )
        .setMaxWidth( "250px" )
        .add( pdbTitle );

    var setPdbTitle = function( event, title ){

        pdbTitle.setValue( title );
        pdbInfo.setDisplay( "block" );

        tether = new Tether( {
            element: pdbInfo.dom,
            target: event.target,
            attachment: 'top right',
            targetAttachment: 'top left',
            offset: '0px 5px',
            constraints: [
                {
                    to: container,
                    attachment: 'element',
                    pin: [ 'top', 'bottom' ]
                }
            ]
        } );

        tether.position();

    };

    var pdbTitleCache = {};

    var getPdbTitle = function( event, id ){

        if( id in pdbTitleCache ){

            setPdbTitle( event, pdbTitleCache[ id ] );

        }else{

            var base = "http://www.rcsb.org/pdb/rest/describePDB?structureId=";
            var url = base + id;

            NGL.autoLoad( url, { ext: "xml" } ).then( function( xml ){

                var descr = xml.data.root;
                var pdb = descr.children[ 0 ];
                var title = pdb.attributes.title;

                pdbTitleCache[ id ] = title;
                setPdbTitle( event, title );

            } );

        }

    };

    // Linker list

    var linkerItems = [];
    for( var name in linkerJson ){
        linkerItems.push(
            [ parseInt( name ) ].concat( linkerJson[ name ] )
        );
    }

    // console.log( linkerItems )

    var selectLinker = function( index ){
        if( index !== undefined ){
            fragsearchResultsPreset.backboneRepr.setSelection(
                "/" + ( linkerItems[ index ][ 0 ] - 1 )
            );
        }
    };

    var columns = [
        {
            name: "ID",
            index: 0,
            align: "right",
            width: 25
        },
        {
            name: "Score 1?",
            index: 1,
            align: "right",
            width: 30,
            format: function( value ){
                return value.toFixed( 2 );
            }
        },
        {
            name: "Score 2?",
            index: 2,
            align: "right",
            width: 30,
            format: function( value ){
                return value.toFixed( 2 );
            }
        },
        {
            name: "PDB",
            index: 4,
            align: "left",
            width: 35,
            onMouseOver: function( event, index, value ){
                getPdbTitle( event, value );
            },
            onMouseOut: function( event, index, value ){
                pdbInfo.setDisplay( "none" );
            }
        },
        {
            name: "Clashes",
            index: 5,
            align: "right",
            width: 30
        },
        {
            name: "Sequence",
            index: 3,
            align: "left",
            width: linkerItems[ 0 ][ 3 ].length * 11
        }
    ];

    var params = {
        onRowSelect: function( event, index ){
            selectLinker( index );
        }
    }

    var virtualTable = new UI.VirtualTable(
            linkerItems, 18, 400, columns, params
        )
        .setWidth( "100%" )
        .setOverflowX( "auto" )
        .setMarginTop( "5px" );

    // sort by score & select first
    virtualTable
        .sortColumn( 1, true )
        .selectRow( 0 );

    //

    container.add(
        showAllBtn,
        new UI.Break(),
        new UI.Break(),
        virtualTable
    );

    return container;

};


function loadFragsearchResults( pdb, linker, json ){

    var initComp = function( comp ){
        comp.requestGuiVisibility( false );
        comp.centerView();
        return comp;
    }

    var promiseList = [
        stage.loadFile( pdb, { ext: "pdb" } ).then( initComp ),
        stage.loadFile( linker, { ext: "pdb" } ).then( initComp ),
        NGL.autoLoad( json, { ext: "json" } )
    ];

    function init( results ){
        var jsonData = results[ 2 ].data;
        var fragsearchResultsWidget = new FragsearchResultsWidget(
            results[ 0 ], results[ 1 ], jsonData
        );
        // panel.add( fragsearchResultsWidget );
        return fragsearchResultsWidget;
    }

    return Promise.all( promiseList ).then( init );

}


var FragsearchResultsLoaderWidget = function(){

    var container = new UI.Panel();

    var pdbFile = new UI.File().setWidth( "200px" );
    var linkerFile = new UI.File().setWidth( "200px" );
    var jsonFile = new UI.File().setWidth( "200px" );
    var infoText = new UI.Text();
    var loadBtn = new UI.Button( "Load" ).onClick( loadFiles );
    var exampleBtn = new UI.Button( "Example" ).onClick( loadExample );

    var results = new UI.Panel();

    //

    function load( pdb, linker, json ){

        infoText.setValue( "loading..." );

        loadFragsearchResults(
            pdb, linker, json
        ).then( function( widget ){
            infoText.setValue( "" );
            widget.setMarginLeft( "20px" );
            results.add(
                new UI.CollapsibleIconPanel()
                    .addStatic( new UI.Text( "Results" ) )
                    .add( widget )
            );
        } ).catch( function( error ){
            infoText.setValue( "ERROR" );
            console.error( error );
        } );

    }

    function loadFiles(){

        var pdb = pdbFile.getFiles()[ 0 ];
        var linker = linkerFile.getFiles()[ 0 ];
        var json = jsonFile.getFiles()[ 0 ];

        if( !pdb || !linker || !json ){
            infoText.setValue( "please supply all files" );
            return;
        }

        load( pdb, linker, json );

    }

    function loadExample(){

        load(
            "data://3dqb.pdb",
            "data://fragsearch/input_pdb_file_linker3.pdb",
            "data://fragsearch/input_pdb_file_linker.json"
        );

    }

    //

    var description = new UI.Panel().add(
        new UI.Html( "FragSearch..." )
    );

    container.add(
        description,
        new UI.Break(),
        new UI.Text( "PDB:" ).setWidth( "45px" ),
        pdbFile,
        new UI.Break(),
        new UI.Text( "Linker PDB:" ).setWidth( "45px" ),
        linkerFile,
        new UI.Break(),
        new UI.Text( "Linker JSON:" ).setWidth( "45px" ),
        jsonFile,
        new UI.Break(),
        new UI.Break(),
        loadBtn.setMarginRight( "10px" ),
        exampleBtn.setMarginRight( "10px" ),
        infoText,
        new UI.Break(),
        new UI.Break(),
        results
    );

    return container;

};


var FragsearchJobWidget = function( server ){

    var container = new UI.Panel();

    var description = new UI.Panel().add(
        new UI.Html( "FragSearch Job" )
    );

    var jobSelect = new JobSelectorWidget( server )
        .setWidth( "120px" )
        .onChange( loadResults );

    var results = new UI.Panel();

    //

    function loadResults(){

        var job = server.getJob( jobSelect.getValue() );
        if( !job ) return;
        var baseUrl = job.urlFor( "file" ) + "/";
        loadFragsearchResults(
            baseUrl + "input_pdb_file.pdb",
            baseUrl + "loop_correl/ori_pdb_linker_file3.pdb",
            baseUrl + "linker_correl.json"
        ).then( function( widget ){
            widget.setMarginLeft( "20px" );
            results.add(
                new UI.CollapsibleIconPanel()
                    .addStatic( new UI.Text( "Results" ) )
                    .add( widget )
            );
        } );

    }

    //

    container.add(
        description,
        jobSelect,
        new UI.Break(),
        new UI.Break(),
        results
    );

    return container;

};

//

function fragsearchResultsLoader(){

    var fragsearchResultsLoaderWidget = new FragsearchResultsLoaderWidget();
    panel.add( fragsearchResultsLoaderWidget );

}

function fragsearchJob(){

    panel.setName( "FragSearch Job" );

    var server = new Server( window.location.origin + "/job/" );
    // server.addJob( "linkit-density_14e5e352-04c4-464f-8d4f-3bdc55d577f2" );

    var fragsearchJobWidget = new FragsearchJobWidget( server );
    panel.add( fragsearchJobWidget );

}
