

var FragfitResultsPreset = function( data, params ){

    var p = Object.assign( {}, params );

    var pdbComp = data[ "pdb" ];
    var mrcComp = data[ "mrc" ];
    var linkerComp = data[ "linker" ];
    var json = data[ "json" ];

    var surfaceOpacity = p.surfaceOpacity || 0.6;

    stage.viewer.setFog( null, 40, 60 );

    // pdb

    var cartoonRepr = pdbComp.addRepresentation( "cartoon", {

    } );

    var licoriceRepr = pdbComp.addRepresentation( "licorice", {

    } );

    // linker

    var backboneRepr = linkerComp.addRepresentation( "backbone", {
        radius: 0.25,
        colorScheme: "modelindex",
        // opacity: 0.3
    } );

    linkerComp.centerView();

    // mrc

    var surfaceRepr = mrcComp.addRepresentation( "surface", {
        name: "map",
        isolevelType: "sigma",
        isolevel: p.isolevel || 2.0,
        smooth: 0,
        wireframe: p.wireframe || false,
        opacity: p.wireframe ? 1.0 : surfaceOpacity,
        side: THREE.DoubleSide,
        opaqueBack: true,
        color: "grey"
    } );

    // json

    // console.log( json );

    //

    this.setSurfaceParams = function( params ){

        var p = Object.assign( {}, params );

        if( p.opacity !== undefined ){
            surfaceOpacity = p.opacity;
        }

        if( p.wireframe === true ){
            p.opacity = 1.0;
        }else if( p.wireframe === false ){
            p.opacity = surfaceOpacity;
        }

        surfaceRepr.setParameters( p );

    };

    this.backboneRepr = backboneRepr;
    this.surfaceRepr = surfaceRepr;

    stage.centerView();

};


var FragfitResultsWidget = function( pdbComp, mrcComp, linkerComp, linkerJson ){

    var data = {};
    var isolevel = 2.0;
    var wireframe = true;

    var container = new UI.Panel();

    var data = {
        pdb: pdbComp,
        mrc: mrcComp,
        linker: linkerComp,
        json: linkerJson
    }

    var params = {
        isolevel: isolevel,
        wireframe: wireframe,
    };

    fragfitResultsPreset = new FragfitResultsPreset( data, params );

    // Isolevel

    var isolevelNumber = new UI.Number( isolevel )
        .onChange( function(){
            fragfitResultsPreset.setSurfaceParams( {
                isolevel: isolevelNumber.getValue()
            } );
        } );

    // Wireframe

    var wireframeCheckbox = new UI.Checkbox( wireframe )
        .onChange( function(){
            fragfitResultsPreset.setSurfaceParams( {
                wireframe: wireframeCheckbox.getValue()
            } );
        } );

    var showAllBtn = new UI.Button( "show all" )
        .onClick( function(){
            fragfitResultsPreset.backboneRepr.setSelection( "*" );
            virtualTable.selectRow();
        } );

    // PDB info

    var tether;

    var showPdbInfo = false;

    var pdbTitle = new UI.Text();

    var pdbInfo = new UI.OverlayPanel()
        .setDisplay( "none" )
        .attach( this.dom )
        .setMaxWidth( "250px" )
        .add( pdbTitle );

    var setPdbTitle = function( event, title ){

        pdbTitle.setValue( title );
        pdbInfo.setDisplay( "block" );

        tether = new Tether( {
            element: pdbInfo.dom,
            target: event.target,
            attachment: 'top right',
            targetAttachment: 'top left',
            offset: '0px 5px',
            constraints: [
                {
                    to: container,
                    attachment: 'element',
                    pin: [ 'top', 'bottom' ]
                }
            ]
        } );

        tether.position();

    };

    var pdbTitleCache = {};

    var getPdbTitle = function( event, id ){

        id = id.toUpperCase();

        if( id in pdbTitleCache ){

            setPdbTitle( event, pdbTitleCache[ id ] );

        }else{

            fetchPdbTitles( [ id ] ).then( function(){

                if( showPdbInfo ){
                    setPdbTitle( event, pdbTitleCache[ id ] );
                }

            } );

        }

    };

    var fetchPdbTitles = function( idList ){

        var base = "http://www.rcsb.org/pdb/rest/describePDB?structureId=";
        var url = base + idList.join( "," ).toUpperCase();

        return NGL.autoLoad( url, { ext: "xml" } ).then( function( xml ){

            var descr = xml.data.root;

            descr.children.forEach( function( pdb ){

                var title = pdb.attributes.title;
                var id = pdb.attributes.structureId;

                pdbTitleCache[ id.toUpperCase() ] = title;

            } )

        } );

    };

    // Linker list

    var linkerItems = [];
    for( var name in linkerJson ){
        linkerItems.push(
            [ parseInt( name ) ].concat( linkerJson[ name ] )
        );
    }

    // console.log( linkerItems )

    var selectLinker = function( index ){
        if( index !== undefined ){
            fragfitResultsPreset.backboneRepr.setSelection(
                "/" + ( linkerItems[ index ][ 0 ] - 1 )
            );
        }
    };

    var columns = [
        {
            name: "ID",
            index: 0,
            align: "right",
            width: 25
        },
        {
            name: "Cross-correlation",
            index: 1,
            align: "right",
            width: 30,
            format: function( value ){
                return value.toFixed( 2 );
            }
        },
        {
            name: "Score 1?",
            index: 2,
            align: "right",
            width: 30,
            format: function( value ){
                return value.toFixed( 2 );
            }
        },
        {
            name: "Score 2?",
            index: 3,
            align: "right",
            width: 30,
            format: function( value ){
                return value.toFixed( 2 );
            }
        },
        {
            name: "PDB",
            index: 5,
            align: "left",
            width: 35,
            onMouseOver: function( event, index, value ){
                showPdbInfo = true;
                getPdbTitle( event, value );
            },
            onMouseOut: function( event, index, value ){
                showPdbInfo = false;
                pdbInfo.setDisplay( "none" );
            }
        },
        {
            name: "Clashes",
            index: 6,
            align: "right",
            width: 30
        },
        {
            name: "Sequence",
            index: 4,
            align: "left",
            width: 120
        }
    ];

    var params = {
        onRowSelect: function( event, index ){
            selectLinker( index );
        }
    }

    var virtualTable = new UI.VirtualTable(
            linkerItems, 18, 400, columns, params
        )
        .setWidth( "100%" )
        .setOverflowX( "auto" )
        .setMarginTop( "5px" );

    // sort by crosscorrel & select first
    virtualTable
        .sortColumn( 1, true )
        .selectRow( 0 );

    //

    container.add(
        new UI.Text( "Isolevel (sigma):" ).setMarginRight( "10px" ),
        isolevelNumber,
        new UI.Break(),
        new UI.Text( "Wireframe:" ).setMarginRight( "10px" ),
        wireframeCheckbox,
        new UI.Break(),
        showAllBtn,
        new UI.Break(),
        new UI.Break(),
        virtualTable
    );

    return container;

};


function loadFragfitResults( pdb, mrc, linker, json ){

    var initComp = function( comp ){
        comp.requestGuiVisibility( false );
        comp.centerView();
        return comp;
    }

    var promiseList = [
        stage.loadFile( pdb, { ext: "pdb" } ).then( initComp ),
        stage.loadFile( mrc, { ext: "mrc" } ).then( initComp ),
        stage.loadFile( linker, { ext: "pdb" } ).then( initComp ),
        NGL.autoLoad( json, { ext: "json" } )
    ];

    function init( results ){
        var jsonData = results[ 3 ].data;
        var fragfitResultsWidget = new FragfitResultsWidget(
            results[ 0 ], results[ 1 ], results[ 2 ], jsonData
        );
        return fragfitResultsWidget;
    }

    return Promise.all( promiseList ).then( init );

}


var FragfitResultsLoaderWidget = function(){

    var container = new UI.Panel();

    var pdbFile = new UI.File().setWidth( "200px" );
    var mrcFile = new UI.File().setWidth( "200px" );
    var linkerFile = new UI.File().setWidth( "200px" );
    var jsonFile = new UI.File().setWidth( "200px" );
    var infoText = new UI.Text();
    var loadBtn = new UI.Button( "Load" ).onClick( loadFiles );
    var exampleBtn = new UI.Button( "Example" ).onClick( loadExample );

    var results = new UI.Panel();

    //

    function load( pdb, mrc, linker, json ){

        infoText.setValue( "loading..." );

        loadFragfitResults(
            pdb, mrc, linker, json
        ).then( function( widget ){
            infoText.setValue( "" );
            widget.setMarginLeft( "20px" );
            results.add(
                new UI.CollapsibleIconPanel()
                    .addStatic( new UI.Text( "Results" ) )
                    .add( widget )
            );
        } ).catch( function( error ){
            infoText.setValue( "ERROR" );
            console.error( error );
        } );

    }

    function loadFiles(){

        var pdb = pdbFile.getFiles()[ 0 ];
        var mrc = mrcFile.getFiles()[ 0 ];
        var linker = linkerFile.getFiles()[ 0 ];
        var json = jsonFile.getFiles()[ 0 ];

        if( !pdb || !mrc || !linker || !json ){
            infoText.setValue( "please supply all files" );
            return;
        }

        load( pdb, mrc, linker, json );

    }

    function loadExample(){

        load(
            "data://ribosomexample.pdb",
            "data://ribocut4a.mrc",
            "data://ori_pdb_linker_file3.pdb",
            "data://linker_correl.json"
        );

    }

    //

    var description = new UI.Panel().add(
        new UI.Html( "FragFit..." )
    );

    container.add(
        description,
        new UI.Break(),
        new UI.Text( "PDB:" ).setWidth( "45px" ),
        pdbFile,
        new UI.Break(),
        new UI.Text( "MRC:" ).setWidth( "45px" ),
        mrcFile,
        new UI.Break(),
        new UI.Text( "Linker PDB:" ).setWidth( "45px" ),
        linkerFile,
        new UI.Break(),
        new UI.Text( "Linker JSON:" ).setWidth( "45px" ),
        jsonFile,
        new UI.Break(),
        new UI.Break(),
        loadBtn.setMarginRight( "10px" ),
        exampleBtn.setMarginRight( "10px" ),
        infoText,
        new UI.Break(),
        new UI.Break(),
        results
    );

    return container;

};


var FragfitJobWidget = function( server ){

    var container = new UI.Panel();
    var results = new UI.Panel();

    //

    // assumes server is ready
    var tool = server.getTool( "linkit-density" );

    tool.signals.jobSubmitted.add( function( job ){

        results.clear();

        if( job === "ERROR" ){
            results.add(
                new UI.Text( "ERROR submitting job" )
            );
        }else{
            toolWidget.setDisplay( "none" );
            job.signals.statusChanged.add( function(){
                updateStatus( job )
            } );
        }

    } );

    var toolWidget = new ToolWidget( tool );

    // status

    var status = new UI.Panel()
        .setDisplay( "none" );

    function updateStatus( job ){

        if( job.running === false ){
            if( job.check === true ){
                status.setDisplay( "none" );
                results.clear();
                loadResults( job );
            }else{
                toolWidget.setDisplay( "block" );
            }
        }else{
            status.setDisplay( "block" );
            status.clear().add(
                new UI.Text( "Check: " + job.check ),
                new UI.Break(),
                new UI.Text( "Running: " + job.running ),
                new UI.Break(),
                new UI.Text( "Log:" ),
                new UI.Break()
            )
            for( var i = 0; i < job.log.length; ++i ){
                status.add(
                    new UI.Text( job.log[ i ] ).setMarginLeft( "10px" ),
                    new UI.Break()
                );
            }
        }

    }

    //

    function loadResults( job ){

        if( !job ) return;

        var baseUrl = job.urlFor( "file" ) + "/";

        loadFragfitResults(

            baseUrl + "input_pdb_file.pdb",
            baseUrl + "input_mrc_file.mrc",
            baseUrl + "loop_correl/ori_pdb_linker_file3.pdb",
            baseUrl + "linker_correl.json"

        ).then( function( widget ){

            results.add(  widget );

        } );

    }

    //

    container.add(
        toolWidget,
        status,
        results
    );

    return container;

};

//

function fragfitResultsLoader(){

    panel.setName( "FragFit Loader" );

    var fragfitResultsLoaderWidget = new FragfitResultsLoaderWidget();
    panel.add( fragfitResultsLoaderWidget );

}

function fragfitJob(){

    panel.setName( "FragFit Job" );

    var server = new Server( window.location.origin + "/job/" );
    // server.addJob( "linkit-density_14e5e352-04c4-464f-8d4f-3bdc55d577f2" );
    // 154:C, 164:C, EDKVEGYKK, 4.2

    server.signals.toolsLoaded.add( function(){

        var fragfitJobWidget = new FragfitJobWidget( server );
        panel.add( fragfitJobWidget );

    } );

}

function fragfitExample(){

    panel.setName( "FragFit Example" );

    loadFragfitResults(

        "data://ribosomexample.pdb",
        "data://ribocut4a.mrc",
        "data://ori_pdb_linker_file3.pdb",
        "data://linker_correl.json"

    ).then( function( widget ){

        panel.add( widget );

    } ).catch( function( error ){

        panel.add( new UI.Text( "ERROR" ) );
        console.error( error );

    } );

}

function fragfitStage(){

    panel.setName( "FragFit Stage" );

    var description = new UI.Panel().add(
        new UI.Html( "FragFit description ..." )
    );
    panel.add( description );

    var newJobBtn = new UI.Button( "New Job" ).onClick( function(){

        stage.loadFile( "data://plugins/fragfit-job.plugin" );

    } );
    panel.add( newJobBtn )

    var exampleBtn = new UI.Button( "Load Example" ).onClick( function(){

        stage.loadFile( "data://plugins/fragfit-example.plugin" );

    } );
    panel.add( exampleBtn )

}
