
var pdb = "3pqr.pdb";


load( pdb );


then( function(){

    var localAngle = 20;
    var centerDist = 2.0;

    structure( pdb )
        .addRepresentation( "rocket", {
            visible: true, sele: "*", color: "chainindex",
            localAngle: localAngle, centerDist: centerDist
        } )
        .addRepresentation( "backbone", {
            visible: false
        }  )
        .addRepresentation( "helixorient", {
            visible: false
        }  )
        .addRepresentation( "rope", {
            visible: true, smooth: 1,
            radius: 0.15, color: "chainindex"
        } )
        .centerView()

    function download( arr, itemSize, name ){

        var i, j, row;
        var n = arr.length;
        var arr2 = [];

        var fs = [];
        for( j = 0; j < itemSize; ++j ) fs.push( "%8.3f" );
        fs = fs.join( "\t" );

        for( i = 0; i < n; i += itemSize ){

            row = [ fs ];
            for( j = 0; j < itemSize; ++j ) row.push( arr[ i + j ] );
            arr2.push( sprintf.apply( null, row ) );

        }

        NGL.download(
            new Blob( [ arr2.join( "\n" ) ], {type : 'text/plain'} ),
            name
        );

    }

    var s = structure( pdb ).structure;

    var helices = [];

    s.eachFiber( function( f ){

        var helixorient = new NGL.Helixorient( f );
        var pos = helixorient.getPosition();

        uiButton( "download", function(){

            download( pos.center, 3, "center.txt" );
            download( pos.axis, 3, "helixaxis.txt" );
            download( pos.radius, 1, "radius.txt" );

        } );

        var helixbundle = new NGL.Helixbundle( f );
        var axis = helixbundle.getAxis( localAngle, centerDist );

        for( var i = 0; i < axis.residue.length; ++i ){

            var helix = new NGL.Helix();
            helix.fromHelixbundleAxis( axis, i );
            helices.push( helix );

        }

    } );

    for( var i = 0; i < helices.length; ++i ){

        var h1 = helices[ i ];

        for( var j = i + 1; j < helices.length; ++j ){

            var h2 = helices[ j ];

            console.log(
                h1.distanceTo( h2 ),
                h1.angleTo( h2 ) / ( Math.PI / 180 )
            );

        }

    }

} );